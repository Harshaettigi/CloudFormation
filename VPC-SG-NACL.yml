---
Parameters:
  VPCCIDR:
    Description: Please enter the IP range (CIDR notation)
    Type: String
    Default: 10.0.0.0/16
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
  PublicSubnetCIDR:
    Description: Please enter the IP range (CIDR notation)
    Type: String
    Default: 10.0.1.0/24
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
  PrivateSubnetCIDR:
    Description: Please enter the IP range (CIDR notation)
    Type: String
    Default: 10.0.2.0/24
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"

  SecurityGroup:
    Description: CIDR Block for SG
    Type: String
    Default: 0.0.0.0/0
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: must be a valid CIDR range
  SecurityGroupData:
    Description: CIDR Block for SG
    Type: String
    Default: 0.0.0.0/0
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: must be a valid CIDR range

  NACLGrp:
    Description: CIDR Block for NACL
    Type: String
    Default: 0.0.0.0/0
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: must be a valid CIDR range

Resources:
  CFVPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: !Ref VPCCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default

  WebSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Web server
      GroupName: web
      VpcId: !Ref CFVPC
      SecurityGroupIngress:
        -
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: !Ref SecurityGroup
        -
          IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: !Ref SecurityGroup

  DatabaseSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Database server
      GroupName: Database
      VpcId: !Ref CFVPC
      SecurityGroupIngress:
        -
          IpProtocol: tcp
          FromPort: 3036
          ToPort: 3036
          CidrIp: !Ref SecurityGroupData

  PublicSubnet:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref CFVPC
      AvailabilityZone: ap-south-1a
      CidrBlock: !Ref PublicSubnetCIDR
      MapPublicIpOnLaunch: true

  PrivateSubnet:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref CFVPC
      AvailabilityZone: ap-south-1a
      CidrBlock: !Ref PrivateSubnetCIDR


  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Name
          Value: CFIGW

  GatewayToInternet:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref CFVPC
      InternetGatewayId: !Ref InternetGateway

  PublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref CFVPC

  PublicRoute:
    Type: 'AWS::EC2::Route'
    DependsOn: GatewayToInternet
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnetRouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref PublicRouteTable

  PrivateRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref CFVPC

  PrivateSubnetRouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PrivateSubnet
      RouteTableId: !Ref PrivateRouteTable

  WebSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Webserver
      GroupName: web
      VpcId: !Ref CFVPC
      SecurityGroupIngress:
        -
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: !Ref SecurityGroup
        -
          IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: !Ref SecurityGroup

  DatabaseSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Database server
      GroupName: Database
      VpcId: !Ref CFVPC
      SecurityGroupIngress:
        -
          IpProtocol: tcp
          FromPort: 3036
          ToPort: 3036
          CidrIp: !Ref SecurityGroupData

  NACL_1:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref CFVPC
      Tags:
      - Key: Name
        Value: NACL_1

  NACLWebServer_1:
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: PublicNetworkAcl
    Properties:
      NetworkAclId: !Ref NACL_1
      RuleNumber: '100'
      Protocol: "-1"
      RuleAction: allow
      Egress: 'false'
      CidrBlock: NACLGrp
      PortRange:
        From: '80'
        To: '80'

  NACLWebServer_2:
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: PublicNetworkAcl
    Properties:
      NetworkAclId: !Ref NACL_1
      RuleNumber: '100'
      Protocol: "-1"
      RuleAction: allow
      Egress: 'false'
      CidrBlock: NACLGrp
      PortRange:
        From: '443'
        To: '443'

  SubnetNACLAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PublicSubnet
      NetworkAclId: !Ref  NACL_1



  NACL_2:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref CFVPC
      Tags:
      - Key: Name
        Value: NACL_2

    NACLDatabase:
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: PublicNetworkAcl
    Properties:
      NetworkAclId: !Ref NACL_2
      RuleNumber: '100'
      Protocol: '-1'
      RuleAction: deny
      Egress: 'false'
      CidrBlock: NACLGrp
      PortRange:
        From: '3306'
        To: '3306'

  SubnetNACLAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref  PrivateSubnet
      NetworkAclId: !Ref  NACL_2


Outputs:
  CFVPC:
    Description: The ID of the VPC
    Value: !Ref CFVPC
    Export:
      Name: !Sub "${AWS::StackName}-VPCID"

  PrivateRouteTable:
    Description: The ID of the RT
    Value: !Ref PrivateRouteTable
    Export:
      Name: !Sub "${AWS::VPC1}-RT"

  VPCCIDR:
    Description: The ID of the VPCCIDR
    Value: !GetAtt VPC1.CidrBlock
    Export:
      Name: !Sub "${AWS::VPC1}-VPCCIDR"